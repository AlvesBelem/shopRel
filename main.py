import sys
import os
import json
import traceback
from PyQt5.QtWidgets import QApplication, QLabel
from ui.main_window import MainApp
from ui.config_window import ConfigWindow
from core.db import DBConnection

# ‚úÖ Vari√°veis globais para manter janelas vivas
main_window = None
config_window = None

def iniciar_app():
    print("üîµ Iniciando aplica√ß√£o...")
    app = QApplication(sys.argv)

    def abrir_main_window():
        print("üîÑ Tentando abrir janela principal...")
        try:
            db = DBConnection()
            db.connect()
            print("‚úÖ Conex√£o com banco de dados bem-sucedida.")

            global main_window
            main_window = MainApp(db)
            main_window.show()
            print("üü¢ Janela principal exibida com sucesso.")
        except Exception as e:
            print("‚ùå Erro ao iniciar o sistema:", e)
            traceback.print_exc()

            # ‚úÖ Armazenar inst√¢ncia no escopo global
            global config_window
            config_window = ConfigWindow(on_success=abrir_main_window)
            config_window.show()
            print("‚ö†Ô∏è Exibindo janela de configura√ß√£o do banco.")

    try:
        if not os.path.exists("config/db_config.json"):
            print("‚ö†Ô∏è Arquivo de configura√ß√£o n√£o encontrado.")
            global config_window
            config_window = ConfigWindow(on_success=abrir_main_window)
            config_window.show()
        else:
            print("üìÅ Arquivo de configura√ß√£o encontrado.")
            abrir_main_window()
    except Exception as e:
        print("‚ùå Erro ao carregar aplica√ß√£o:", e)
        traceback.print_exc()
        # Exibe uma janela b√°sica com erro
        error_label = QLabel("Erro ao carregar aplica√ß√£o. Verifique o terminal.")
        error_label.show()

    sys.exit(app.exec_())

if __name__ == "__main__":
    iniciar_app()
